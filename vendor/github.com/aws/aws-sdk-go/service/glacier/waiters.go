// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package glacier

import (
	"github.com/aws/aws-sdk-go/private/waiter"
)

var waiterVaultExists *waiter.Config

func (c *Glacier) WaitUntilVaultExists(input *DescribeVaultInput) error {
	if waiterVaultExists == nil {
		waiterVaultExists = &waiter.Config{
			Operation:   "DescribeVault",
			Delay:       3,
			MaxAttempts: 15,
			Acceptors: []waiter.WaitAcceptor{
				{
					State:    "success",
					Matcher:  "status",
					Argument: "",
					Expected: 200,
				},
				{
					State:    "retry",
					Matcher:  "error",
					Argument: "",
					Expected: "ResourceNotFoundException",
				},
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterVaultExists,
	}
	return w.Wait()
}

var waiterVaultNotExists *waiter.Config

func (c *Glacier) WaitUntilVaultNotExists(input *DescribeVaultInput) error {
	if waiterVaultNotExists == nil {
		waiterVaultNotExists = &waiter.Config{
			Operation:   "DescribeVault",
			Delay:       3,
			MaxAttempts: 15,
			Acceptors: []waiter.WaitAcceptor{
				{
					State:    "retry",
					Matcher:  "status",
					Argument: "",
					Expected: 200,
				},
				{
					State:    "success",
					Matcher:  "error",
					Argument: "",
					Expected: "ResourceNotFoundException",
				},
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterVaultNotExists,
	}
	return w.Wait()
}
