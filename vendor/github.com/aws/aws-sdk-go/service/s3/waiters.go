// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package s3

import (
	"github.com/aws/aws-sdk-go/private/waiter"
)

var waiterBucketExists *waiter.Config

func (c *S3) WaitUntilBucketExists(input *HeadBucketInput) error {
	if waiterBucketExists == nil {
		waiterBucketExists = &waiter.Config{
			Operation:   "HeadBucket",
			Delay:       5,
			MaxAttempts: 20,
			Acceptors: []waiter.WaitAcceptor{
				{
					State:    "success",
					Matcher:  "status",
					Argument: "",
					Expected: 200,
				},
				{
					State:    "success",
					Matcher:  "status",
					Argument: "",
					Expected: 403,
				},
				{
					State:    "retry",
					Matcher:  "status",
					Argument: "",
					Expected: 404,
				},
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterBucketExists,
	}
	return w.Wait()
}

var waiterBucketNotExists *waiter.Config

func (c *S3) WaitUntilBucketNotExists(input *HeadBucketInput) error {
	if waiterBucketNotExists == nil {
		waiterBucketNotExists = &waiter.Config{
			Operation:   "HeadBucket",
			Delay:       5,
			MaxAttempts: 20,
			Acceptors: []waiter.WaitAcceptor{
				{
					State:    "success",
					Matcher:  "status",
					Argument: "",
					Expected: 404,
				},
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterBucketNotExists,
	}
	return w.Wait()
}

var waiterObjectExists *waiter.Config

func (c *S3) WaitUntilObjectExists(input *HeadObjectInput) error {
	if waiterObjectExists == nil {
		waiterObjectExists = &waiter.Config{
			Operation:   "HeadObject",
			Delay:       5,
			MaxAttempts: 20,
			Acceptors: []waiter.WaitAcceptor{
				{
					State:    "success",
					Matcher:  "status",
					Argument: "",
					Expected: 200,
				},
				{
					State:    "retry",
					Matcher:  "status",
					Argument: "",
					Expected: 404,
				},
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterObjectExists,
	}
	return w.Wait()
}

var waiterObjectNotExists *waiter.Config

func (c *S3) WaitUntilObjectNotExists(input *HeadObjectInput) error {
	if waiterObjectNotExists == nil {
		waiterObjectNotExists = &waiter.Config{
			Operation:   "HeadObject",
			Delay:       5,
			MaxAttempts: 20,
			Acceptors: []waiter.WaitAcceptor{
				{
					State:    "success",
					Matcher:  "status",
					Argument: "",
					Expected: 404,
				},
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterObjectNotExists,
	}
	return w.Wait()
}
